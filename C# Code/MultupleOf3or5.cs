using System;
using System.Text;

namespace MultupleOf3or5
{
    class Program
    {
        static bool IsPalindrome(int number)
        {
            string strNumber = number.ToString();
            char[] charArray = strNumber.ToCharArray();
            Array.Reverse(charArray);
            string reversedStr = new string(charArray);

            return strNumber.Equals(reversedStr);
        }

        static int LargestPalindromeProduct()
        {
            int largestPalindrome = 0;

            for (int i = 1; i < 10; i++)
            {
                for (int j = i; j < 10; j++)
                {
                    int product = i * j;
                    if (IsPalindrome(product) && product > largestPalindrome)
                    {
                        largestPalindrome = product;
                    }
                }
            }

            return largestPalindrome;
        }


        static void Main(string[] args)
        {

            ////If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.Find the sum of all the multiples of 3 or 5 below 1000.
            //int total3or5sum = 0;
            //for (int i = 1; i < 1000; i++)
            //{
            //    if (i % 3 == 0 || i % 5 == 0)
            //        total3or5sum = total3or5sum + i;
            //}
            //Console.WriteLine("Sum of 3 or 5 below 1000 is = {0}", total3or5sum);      

            ////Each new term in the Fibonacci sequence is generated by adding the previous two terms.By starting with and, the first terms will be: 1 2 3 5 8 13 21 34 55 89, ...
            //int firstterm = 0, secondterm=1;
            //Console.Write($" {firstterm}, {secondterm}");
            //for (int i = 2; i <= 10; i++)
            //{                
            //      int nextterm = firstterm + secondterm;
            //        Console.Write($", {nextterm}");                   
            //        firstterm = secondterm;
            //        secondterm = nextterm;
            //}

            // //The prime factors of 13195 are 5, 7, 13 and 29.What is the largest prime factor of the number 600851475143 ?
            // long n = 600851475143L;
            // for (long i = 2; i < n; ++i)
            // {
            //     while (n % i == 0)
            //         n = n / i;        
            // }
            //Console.WriteLine(n);

            ////Find the largest palindrome made from the product of two-3 digit numbers.
            //int palan = 0;
            //for (int i = 10; i < 100; i++)  //if 3 digit the i=100; i<1000
            //{
            //    for (int j = 10; j < 100; j++)  //if 3 digit the i=100; i<1000
            //    {
            //        int p = i * j;
            //        char[] q = p.ToString().ToCharArray();
            //        Array.Reverse(q);
            //        string s = new string(q);
            //        if (p.ToString().Equals(s.ToString()) && p >palan)
            //            palan = p;
            //    }
            //}           
            //Console.WriteLine("The largest palindrome product of two 2-digit numbers is: " + palan);

            // 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
            // What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20 ?

            //int i = 2520;
            //bool found = false;
            //while (!found)
            //{
            //    i += 2520;
            //    bool isDividable = true;
            //    for (int j = 11; j <= 20; j++)
            //    {
            //        if (i % j != 0)
            //        {
            //            isDividable = false;
            //            break;
            //        }
            //    }
            //    if (isDividable)               
            //        found = true;               
            //}
            //Console.WriteLine(i);

            //int result = 1, total=0;
            //for (int i = 2; i <= 20; i++)
            //{
            //    total= Math.Abs(result * i) / GCD(result, i);

            //}
            //Console.WriteLine(total);

            long result = FindLCMOfRange(20);
            Console.WriteLine(result);
            Console.ReadKey();
        }

        static long GCD(long a, long b)
        {
            return b == 0 ? a : GCD(b, a % b);
        }

        static long LCM(long a, long b)
        {
            return Math.Abs(a * b) / GCD(a, b);
        }

        static long FindLCMOfRange(long n)
        {
            long result = 1;
            for (long i = 2; i <= n; i++)
            {
                result = LCM(result, i);
            }
            return result;
        }

    }
}
